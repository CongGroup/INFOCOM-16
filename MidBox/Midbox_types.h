/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Midbox_TYPES_H
#define Midbox_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace mb {

class TQueryKey;


class TQueryKey {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  TQueryKey(const TQueryKey&);
  TQueryKey& operator=(const TQueryKey&);
  TQueryKey() : Trapdoor(), Mask() {
  }

  virtual ~TQueryKey() throw();
  std::string Trapdoor;
  std::string Mask;

  void __set_Trapdoor(const std::string& val);

  void __set_Mask(const std::string& val);

  bool operator == (const TQueryKey & rhs) const
  {
    if (!(Trapdoor == rhs.Trapdoor))
      return false;
    if (!(Mask == rhs.Mask))
      return false;
    return true;
  }
  bool operator != (const TQueryKey &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TQueryKey & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TQueryKey& obj);
};

void swap(TQueryKey &a, TQueryKey &b);

} // namespace

#endif
