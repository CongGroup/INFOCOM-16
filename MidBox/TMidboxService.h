/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TMidboxService_H
#define TMidboxService_H

#include <thrift/TDispatchProcessor.h>
#include "Midbox_types.h"

namespace mb {

class TMidboxServiceIf {
 public:
  virtual ~TMidboxServiceIf() {}

  /**
   * Send the QueryKey to Midbox.
   * 
   * @param trapdoors
   */
  virtual void Query(const std::vector<TQueryKey> & trapdoors) = 0;

  /**
   * Send the Http Payload to Midbox.
   * 
   * @param sPayload
   */
  virtual void WebRequest(const std::string& sPayload) = 0;
};

class TMidboxServiceIfFactory {
 public:
  typedef TMidboxServiceIf Handler;

  virtual ~TMidboxServiceIfFactory() {}

  virtual TMidboxServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TMidboxServiceIf* /* handler */) = 0;
};

class TMidboxServiceIfSingletonFactory : virtual public TMidboxServiceIfFactory {
 public:
  TMidboxServiceIfSingletonFactory(const boost::shared_ptr<TMidboxServiceIf>& iface) : iface_(iface) {}
  virtual ~TMidboxServiceIfSingletonFactory() {}

  virtual TMidboxServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TMidboxServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TMidboxServiceIf> iface_;
};

class TMidboxServiceNull : virtual public TMidboxServiceIf {
 public:
  virtual ~TMidboxServiceNull() {}
  void Query(const std::vector<TQueryKey> & /* trapdoors */) {
    return;
  }
  void WebRequest(const std::string& /* sPayload */) {
    return;
  }
};


class TMidboxService_Query_args {
 public:

  static const char* ascii_fingerprint; // = "006EFB9C0A4E436459CDFDF617590BB4";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0x6E,0xFB,0x9C,0x0A,0x4E,0x43,0x64,0x59,0xCD,0xFD,0xF6,0x17,0x59,0x0B,0xB4};

  TMidboxService_Query_args(const TMidboxService_Query_args&);
  TMidboxService_Query_args& operator=(const TMidboxService_Query_args&);
  TMidboxService_Query_args() {
  }

  virtual ~TMidboxService_Query_args() throw();
  std::vector<TQueryKey>  trapdoors;

  void __set_trapdoors(const std::vector<TQueryKey> & val);

  bool operator == (const TMidboxService_Query_args & rhs) const
  {
    if (!(trapdoors == rhs.trapdoors))
      return false;
    return true;
  }
  bool operator != (const TMidboxService_Query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMidboxService_Query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TMidboxService_Query_args& obj);
};


class TMidboxService_Query_pargs {
 public:

  static const char* ascii_fingerprint; // = "006EFB9C0A4E436459CDFDF617590BB4";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0x6E,0xFB,0x9C,0x0A,0x4E,0x43,0x64,0x59,0xCD,0xFD,0xF6,0x17,0x59,0x0B,0xB4};


  virtual ~TMidboxService_Query_pargs() throw();
  const std::vector<TQueryKey> * trapdoors;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TMidboxService_Query_pargs& obj);
};


class TMidboxService_Query_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  TMidboxService_Query_result(const TMidboxService_Query_result&);
  TMidboxService_Query_result& operator=(const TMidboxService_Query_result&);
  TMidboxService_Query_result() {
  }

  virtual ~TMidboxService_Query_result() throw();

  bool operator == (const TMidboxService_Query_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TMidboxService_Query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMidboxService_Query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TMidboxService_Query_result& obj);
};


class TMidboxService_Query_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~TMidboxService_Query_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TMidboxService_Query_presult& obj);
};


class TMidboxService_WebRequest_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  TMidboxService_WebRequest_args(const TMidboxService_WebRequest_args&);
  TMidboxService_WebRequest_args& operator=(const TMidboxService_WebRequest_args&);
  TMidboxService_WebRequest_args() : sPayload() {
  }

  virtual ~TMidboxService_WebRequest_args() throw();
  std::string sPayload;

  void __set_sPayload(const std::string& val);

  bool operator == (const TMidboxService_WebRequest_args & rhs) const
  {
    if (!(sPayload == rhs.sPayload))
      return false;
    return true;
  }
  bool operator != (const TMidboxService_WebRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMidboxService_WebRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TMidboxService_WebRequest_args& obj);
};


class TMidboxService_WebRequest_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~TMidboxService_WebRequest_pargs() throw();
  const std::string* sPayload;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TMidboxService_WebRequest_pargs& obj);
};


class TMidboxService_WebRequest_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  TMidboxService_WebRequest_result(const TMidboxService_WebRequest_result&);
  TMidboxService_WebRequest_result& operator=(const TMidboxService_WebRequest_result&);
  TMidboxService_WebRequest_result() {
  }

  virtual ~TMidboxService_WebRequest_result() throw();

  bool operator == (const TMidboxService_WebRequest_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TMidboxService_WebRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMidboxService_WebRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TMidboxService_WebRequest_result& obj);
};


class TMidboxService_WebRequest_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~TMidboxService_WebRequest_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TMidboxService_WebRequest_presult& obj);
};

class TMidboxServiceClient : virtual public TMidboxServiceIf {
 public:
  TMidboxServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TMidboxServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Query(const std::vector<TQueryKey> & trapdoors);
  void send_Query(const std::vector<TQueryKey> & trapdoors);
  void recv_Query();
  void WebRequest(const std::string& sPayload);
  void send_WebRequest(const std::string& sPayload);
  void recv_WebRequest();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TMidboxServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TMidboxServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TMidboxServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_WebRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TMidboxServiceProcessor(boost::shared_ptr<TMidboxServiceIf> iface) :
    iface_(iface) {
    processMap_["Query"] = &TMidboxServiceProcessor::process_Query;
    processMap_["WebRequest"] = &TMidboxServiceProcessor::process_WebRequest;
  }

  virtual ~TMidboxServiceProcessor() {}
};

class TMidboxServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TMidboxServiceProcessorFactory(const ::boost::shared_ptr< TMidboxServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TMidboxServiceIfFactory > handlerFactory_;
};

class TMidboxServiceMultiface : virtual public TMidboxServiceIf {
 public:
  TMidboxServiceMultiface(std::vector<boost::shared_ptr<TMidboxServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TMidboxServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TMidboxServiceIf> > ifaces_;
  TMidboxServiceMultiface() {}
  void add(boost::shared_ptr<TMidboxServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Query(const std::vector<TQueryKey> & trapdoors) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Query(trapdoors);
    }
    ifaces_[i]->Query(trapdoors);
  }

  void WebRequest(const std::string& sPayload) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->WebRequest(sPayload);
    }
    ifaces_[i]->WebRequest(sPayload);
  }

};

} // namespace

#endif
